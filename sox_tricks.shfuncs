#!/bin/sh

################################################################################
# SOX TRICKS https://github.com/datamads/sox-tricks
# Author: Mads Kjeldgaard
# Contributor: Mauro Lizaur
#
# License ??
# 2018? - 20??
################################################################################


################################################################################
# BOF INTERNAL HELPERS
################################################################################
# VERBOSITY
# Determines if the scripts should notify the user with a message or not.
# Usage: func-name -V
verbosity() {
    getopts ":V" OPTION
    [ "$OPTION" = "V" ]
}

# SOUNDFINDER
# Finds most common sound files in a directory
# Usage: cd /path/of/sounds && soundFinder;
soundFinder() {
    #find . -type f -regextype posix-extended -regex ".*[.](wav|mp3|aif(f)?)$"
    find . -type f -regex ".*" | grep -iE ".*[.](wav|mp3|aif(f)?)";
}
################################################################################
# EOF INTERNAL HELPERS
################################################################################

################################################################################
# BOF SINGLE FILE OPERATIONS
################################################################################

# NORMALIZE
# Normalizes a sound file
# Usage: normalize [-V] "path/to/sound.wav" "path/to/normalized.wav" "amp in dB"
normalize() {
    VERBOSITY="";
    verbosity $@ && VERBOSITY="-V" && shift;

    if [ "$1" = "" ];
    then
        [ "$VERBOSITY" = "-V" ] && \
            echo "Missing file!";
        exit 1;
    fi;

    INPUT=$1;
    OUTPUT=$2;
    DB=$3;
    [ "$DB" = "" ] && DB=-0.1;

    sox "$INPUT" --norm="$DB" "$OUTPUT" $VERBOSITY;

    return 0;
}

# FADEINOUT
# Adds a small fade ins + outs to a sound file
# Usage: fadeinout [-V] "path/to/sound.wav" "path/to/fadeinout.wav"
fadeinout() {
    VERBOSITY="";
    verbosity $@ && VERBOSITY="-V" && shift;

    if [ "$1" = "" ];
    then
        [ "$VERBOSITY" = "-V" ] && \
            echo "Missing file!";
        exit 1;
    fi;

    INPUT=$1;
    OUTPUT=$2;

    sox "$INPUT" "$OUTPUT" \
        fade t 0.01 0 0.01 \
        $VERBOSITY;

    return 0;
}

# SPLITBYSILENCE
# Split audio file by silence
# Usage: splitbysilence [-V] "path/to/sound.wav"
splitbysilence() {
    VERBOSITY="";
    verbosity $@ && VERBOSITY="-V" && shift;

    if [ "$1" = "" ];
    then
        [ "$VERBOSITY" = "-V" ] && \
            echo "Missing file!";
        exit 1;
    fi;
    INPUT=$1;

    sox "$INPUT" "$INPUT" \
        silence 1 0.1 1% 1 0.1 1% : newfile : restart \
        $VERBOSITY;

    return 0;
}

# STEREO2MONO
# Convert stereo audio to mono
# Usage: stereo2mono [-V] "path/to/stereo.wav" "path/to/mono.wav"
stereo2mono() {
    VERBOSITY="";
    verbosity $@ && VERBOSITY="-V" && shift;

    if [ "$1" = "" ];
    then
        [ "$VERBOSITY" = "-V" ] && \
            echo "Missing file!";
        exit 1;
    fi;
    INPUT=$1;
    OUTPUT=$2;

    sox "$INPUT" "$OUTPUT" remix 1,2 $VERBOSITY;

    return 0;
}

# TRIMSILENCE
# Trim silence from begin and end
# Usage: trimsilence [-V] "path/to/sound.wav" "path/to/trimmed.wav"
trimsilence() {
    VERBOSITY="";
    verbosity $@ && VERBOSITY="-V" && shift;

    if [ "$1" = "" ];
    then
        [ "$VERBOSITY" = "-V" ] && \
            echo "Missing file!";
        exit 1;
    fi;
    INPUT=$1;
    OUTPUT=$2;

    sox "$INPUT" "$OUTPUT" silence -l 1 0.125 1% -1 2.0 1% $VERBOSITY;

    return 0;
}

# to4410016
# Converts audio to 44100 hz (sample rate) and 16 bits (bit depth)
# Usage: to4410016 [-V] "path/to/sound.wav" "path/to/sound4410016b.wav"
to4410016() {
    VERBOSITY="";
    verbosity $@ && VERBOSITY="-V" && shift;

    if [ "$1" = "" ];
    then
        [ "$VERBOSITY" = "-V" ] && \
            echo "Missing file!";
        exit 1;
    fi;
    INPUT=$1;
    OUTPUT=$2;

    sox -G "$INPUT" -b 16 "$OUTPUT" rate 44100 dither -s $VERBOSITY;

    return 0;
}

# VOICECLEANUP
# Cleans up voice audio
# Usage: voicecleanup [-V] "path/to/voice.wav" "path/to/clean.wav"
voicecleanup() {
    VERBOSITY="";
    verbosity $@ && VERBOSITY="-V" && shift;

    if [ "$1" = "" ];
    then
        [ "$VERBOSITY" = "-V" ] && \
            echo "Missing file!";
        exit 1;
    fi;
    INPUT=$1;
    OUTPUT=$2;

    sox "$INPUT" "$OUTPUT" \
        remix - \
        highpass 100 \
        norm \
        compand 0.05,0.2 6:-54,-90,-36,-36,-24,-24,0,-12 0 -90 0.1 \
        vad -T 0.6 -p 0.2 -t 5 \
        fade 0.1 \
        reverse \
        vad -T 0.6 -p 0.2 -t 5 \
        fade 0.1 \
        reverse \
        norm -0.5 \
        $VERBOSITY;

    return 0;
}

# REPEATSOUND
# Repeats an sound N times
# Usage: repeatsound [-V] "path/to/input.wav" "path/to/output.wav" "times [int]"
repeatsound() {
    VERBOSITY="";
    verbosity $@ && VERBOSITY="-V" && shift;

    if [ "$1" = "" ];
    then
        [ "$VERBOSITY" = "-V" ] && \
            echo "Missing file!";
        exit 1;
    fi;
    INPUT=$1;
    OUTPUT=$2;
    TIMES=$3;

    sox "$INPUT" "$OUTPUT" \
        repeat $TIMES \
        $VERBOSITY;

    return 0;
}


# GENSOUND
# Generates a sound file
# Usage: gensound [-V] "path/to/output.wav" "type" "length" "frequency or note"
# Note: Valid "type" are: sine, square, triangle, sawtooth, trapezium, exp,
# [white]noise, tpdfnoise, pinknoise, brownnoise, pluck.
gensound() {
    VERBOSITY="";
    verbosity $@ && VERBOSITY="-V" && shift;

    if [ "$1" = "" ];
    then
        [ "$VERBOSITY" = "-V" ] && \
            echo "Missing file!";
        exit 1;
    fi;
    OUTPUT=$1;
    TYPE=$2;
    LENGTH=$3;
    FREQ=$4;

    sox -n "$OUTPUT" \
        synth $LENGTH \
        $TYPE $FREQ \
        $VERBOSITY;

    return 0;
}


# LOWPASS
# Lowpass filter on sound file
# Usage: lowpass [-V] "path/to/input.wav" "path/to/output.wav" "frequency [int]"
lowpass() {
    VERBOSITY="";
    verbosity $@ && VERBOSITY="-V" && shift;

    if [ "$1" = "" ];
    then
        [ "$VERBOSITY" = "-V" ] && \
            echo "Missing file!";
        exit 1;
    fi;
    INPUT=$1;
    OUTPUT=$2;
    FREQ=$3;

    sox "$OUTPUT" "$INPUT" \
        lowpass -1 $FREQ \
        $VERBOSITY;

    return 0;
}

# HIGHPASS
# Highpass filter on sound file
# Usage: highpass [-V] "path/to/input.wav" "path/to/output.wav" "frequency [int]"
highpass() {
    VERBOSITY="";
    verbosity $@ && VERBOSITY="-V" && shift;

    if [ "$1" = "" ];
    then
        [ "$VERBOSITY" = "-V" ] && \
            echo "Missing file!";
        exit 1;
    fi;
    INPUT=$1;
    OUTPUT=$2;
    FREQ=$3;

    sox "$OUTPUT" "$INPUT" \
        highpass -1 $FREQ \
        $VERBOSITY;

    return 0;
}

# REVERSE
# Reverse a sound file
# Usage: reverse [-V] "path/to/input.wav" "path/to/output.wav"
reverse() {
    VERBOSITY="";
    verbosity $@ && VERBOSITY="-V" && shift;

    if [ "$1" = "" ];
    then
        [ "$VERBOSITY" = "-V" ] && \
            echo "Missing file!";
        exit 1;
    fi;
    INPUT=$1;
    OUTPUT=$2;

    sox "$OUTPUT" "$INPUT" \
        reverse \
        $VERBOSITY;

    return 0;
}


################################################################################
# EOF SINGLE FILE OPERATIONS
################################################################################


################################################################################
# BOF MULTIPLE FILE OPERATIONS
################################################################################

# NORMDIR
# applies `normalize` in the current directory of sounds
normdir() {
    soxNormFunc() {
        FILES=$(soundFinder);
        VERBOSITY="";
        verbosity $@ && VERBOSITY="-V" && shift;

        for file in $FILES;
        do
            normalize $VERBOSITY \
                      "$file" \
                      "converted/normalized_$(basename $file)" \
                      "-0.1";
        done;
    }

    mkdir -p converted && \
        soxNormFunc $@ && \
        verbosity $@ && \
        echo "Done normalizing sounds!";
}

# FADEDIR
# applies `fadeinout` in the current directory of sounds
fadedir() {
    soxFadeFunc() {
        FILES=$(soundFinder);
        VERBOSITY="";
        verbosity $@ && VERBOSITY="-V" && shift;

        for file in $FILES;
        do
            fadeinout $VERBOSITY \
                      "$file" \
                      "converted/faded_$(basename $file)";
        done;
    }

    mkdir -p converted && \
        soxFadeFunc $@ && \
        verbosity $@ && \
        echo "Done adding fades to sounds!";

    return 0;
}

# SPLITDIR
# applies `splitbysilence` in the current directory of sounds
splitdir() {
    soxSplitFunc() {
        FILES=$(soundFinder);
        VERBOSITY="";
        verbosity $@ && VERBOSITY="-V" && shift;

        for file in $FILES;
        do
            splitbysilence $VERBOSITY "$file";
        done;
    }

    mkdir -p converted && \
        soxSplitFunc $@ && \
        verbosity $@ && \
        echo "Done splitting sounds!";

    return 0;
}

# STEREO2MONODIR
# applies `stereo2mono` in the current directory of sounds
stereo2monodir() {
    soxS2MFunc() {
        FILES=$(soundFinder);
        VERBOSITY="";
        verbosity $@ && VERBOSITY="-V" && shift;

        for file in $FILES;
        do
            stereo2mono $VERBOSITY \
                        "$file" \
                        "converted/mono_$(basename $file)";
        done;
    }

    mkdir -p converted && \
        soxS2MFunc $@ && \
        verbosity $@ && \
        echo "Done converting to mono sounds!";

    return 0;
}

# TO4410016DIR
# applies `to4410016` in the current directory of sounds
to4410016dir() {
    sox4410016Func() {
        FILES=$(soundFinder);
        VERBOSITY="";
        verbosity $@ && VERBOSITY="-V" && shift;

        for file in $FILES;
        do
            to4410016 $VERBOSITY \
                      "$file" \
                      "converted/4410016_$(basename $file)";
        done;
    }

    mkdir -p converted && \
        sox4410016Func $@ && \
        verbosity $@ && \
        echo "Done converting sounds!";

    return 0;
}

# VOICECLEANUPDIR
# applies `voicecleanupdir` in the current directory of sounds
voicecleanupdir() {
    soxVoiceFunc() {
        FILES=$(soundFinder);
        VERBOSITY="";
        verbosity $@ && VERBOSITY="-V" && shift;

        for file in $FILES;
        do
            voicecleanup $VERBOSITY \
                         "$file" \
                         "converted/cleanup_$(basename $file)";
        done;
    }

    mkdir -p converted && \
        soxVoiceFunc $@ && \
        verbosity $@ && \
        echo "Done cleaning sounds!";

    return 0;
}

################################################################################
# BOF MULTIPLE FILE OPERATIONS
################################################################################
